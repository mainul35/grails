========================================================================================================================
                                     (GORM) Grails Object Relational Mapping
========================================================================================================================
Database Relationship
------------------------
1.one-to-one
Example: A user has one profile.

2.one-to-many
Example: A user can have multiple recipes.

3.many-to-many
Example: Recipes have, and belong to, many ingredients.

========================================================================================================================
                                                    one-to-one
========================================================================================================================
To make the relationship a true one-to-one, use the hasOne property on the owning side:
------------------------------------------------------------------------------------------------------------------------
class Face {
    static hasOne = [nose:Nose]
}
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
class Nose {
    String name
    Face face
}
OR
class Nose {
    String name
    static belongsTo[face:Face]
}
------------------------------------------------------------------------------------------------------------------------




========================================================================================================================
                                                    one-to-many
========================================================================================================================
A one-to-many relationship is when one class, example Author, has many instances of another class, example Book. With
Grails we define such a relationship with the hasMany setting:
------------------------------------------------------------------------------------------------------------------------
class Author {
    String name
    static hasMany = [books: Book]
}
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
class Book {
    String title
}
------------------------------------------------------------------------------------------------------------------------
In this case we have a unidirectional one-to-many. Grails will, by default, map this kind of relationship with a join
table.

Grails will automatically inject a property of type java.util.Set into the domain class based on the hasMany setting.
This can be used to iterate over the collection:
------------------------------------------------------------------------------------------------------------------------
def a = Author.get(1)
for (book in a.books) {
    println book.title
}
------------------------------------------------------------------------------------------------------------------------

Bidirectional Relation
------------------------------------------------------------------------------------------------------------------------
class Author {
    static hasMany = [books: Book]
    String name
}
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
class Book {
    static belongsTo = [author: Author]
    String title
}
------------------------------------------------------------------------------------------------------------------------

========================================================================================================================
                                                    many-to-many
========================================================================================================================
Grails supports many-to-many relationships by defining a hasMany on both sides of the relationship and having a belongsTo
on the owned side of the relationship:
------------------------------------------------------------------------------------------------------------------------
class Book {
    static belongsTo = Author
    static hasMany = [authors:Author]
    String title
}
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
class Author {
    static hasMany = [books:Book]
    String name
}
------------------------------------------------------------------------------------------------------------------------
Grails maps a many-to-many using a join table at the database level. The owning side of the relationship, in this case
Author, takes responsibility for persisting the relationship and is the only side that can cascade saves across.

For example this will work and cascade saves:
------------------------------------------------------------------------------------------------------------------------
new Author(name:"Stephen King")
        .addToBooks(new Book(title:"The Stand"))
        .addToBooks(new Book(title:"The Shining"))
        .save()
------------------------------------------------------------------------------------------------------------------------

However this will only save the Book and not the authors!
------------------------------------------------------------------------------------------------------------------------
new Book(name:"Groovy in Action")
        .addToAuthors(new Author(name:"Dierk Koenig"))
        .addToAuthors(new Author(name:"Guillaume Laforge"))
        .save()
------------------------------------------------------------------------------------------------------------------------